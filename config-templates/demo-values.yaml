clusters:
  view: # TAP view profile installed
    name: 
    provider: #accepted values: aks,eks,gke.  
    nodes: 3
  dev: # TAP interate profile installed
    name: 
    provider: #accepted values: aks,eks,gke 
    nodes: 5 
  stage: #TAP build profile installed
    name: 
    provider: #accepted values: aks,eks,gke
    nodes: 5 
  prod: # TAP run profile installed
    name: 
    provider: #accepted values: aks,eks,gke
    nodes: 3 
  brownfield: #optional, needed for bronwfield apis demo, SCGW and TSM, no TAP installed
    name: 
    provider: #accepted values: aks,eks,gke
    nodes: 3 

clouds:
  azure:
    location: 
    resourceGroup: 
    nodeType: Standard_DS3_v2 
  aws:
    accountID: 
    IAMuser:
    region: 
    instanceType: t3.xlarge
  gcp:
    region: 
    projectID: 
    machineType: e2-standard-4

private_registry:
  host: 
  username: 
  password: 

repositories: #repos needs to be created manually in your private registry
  system: 
  dev: 
  stage: 

tanzu_network:
  username: 
  password: 

tap:
  tapVersion: "1.4.0"
  carvelBundle: "sha256:5fd527dda8af0e4c25c427e5659559a2ff9b283f6655a335ae08357ff63b8e7f"
  imageScanTemplateSrcScanSC: snyk-private-image-scan-template #accepted values: carbonblack-private-image-scan-template snyk-private-image-scan-template, private-image-scan-template
  imageScanTemplateSrcTestScanSC: carbonblack-private-image-scan-template #accepted values: carbonblack-private-image-scan-template snyk-private-image-scan-template, private-image-scan-template
  ingressIssuer: dekt-letsencrypt # if modified, issuer name must be indetical to .config/cluster-configs/cluster-issuer.yaml
  isvImg: data-ai #BYO image name, must be pushed to private_registry/isvs repo

snyk: 
  token: 

carbonblack:
  cbc_api_id: 
  cbc_api_key: 
  cbc_org_key: 
  cbc_saas_url: 

apps_namespaces: 
  dev: #for single dev workload
  team: #for team dev workloads
  stageProd: #for stage and prod workloads

gitops:
  server: "https://github.com/"
  apiKey: 
  owner: 
  dev: #repo needs to be created manually and clone at the same folder level as the demo repo, make sure git pull works
  stage: #repo needs to be created manually and clone at the same folder level as the demo repo, make sure git pull works

dns: #e.g. dev.dekt.io / run.dekt.io
  domain: 
  sysSubDomain: 
  devSubDomain: 
  prodSubDomain: 
  godaddyApiKey: 
  godaddyApiSecret: 

data_services:
  tdsVersion: 1.6.0 
  tanzuPostgresVersion:
  rdsProfile: #pre-configured named profile for an AWS account that has permissions to manage RDS databases

brownfield_apis: #optional, needed if you want to demo 'brownfield apis'
  scgwInstallDirectory:
  privateClusterContext: #setup this cluster (e.g. on vSphere) seperatly, and put the kubectl context name here

tmc:
  apiToken: 
  clusterGroup:
