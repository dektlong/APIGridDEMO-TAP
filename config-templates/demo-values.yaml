clusters:
  view: # TAP view profile installed
    name: 
    provider: #accepted values: aks,eks,gke 
    nodes: 3
  dev: # TAP interate profile installed
    name: 
    provider: #accepted values: aks,eks,gke  
    nodes: 5 
  stage: #TAP build profile installed
    name: 
    provider: #accepted values: aks,eks,gke 
    nodes: 5 
  prod1: # TAP run profile installed
    name: 
    provider: #accepted values: aks,eks,gke  
    nodes: 3
  prod2: # TAP run profile installed
    name: 
    provider: #accepted values: aks,eks,gke  
    nodes: 3 
  brownfield: #for bronwfield apis demo, SCGW and TSM, no TAP installed
    name: 
    provider: #accepted values: aks,eks,gke 
    nodes: 2 

clouds:
  azure:
    location: # US: westus | UK: ukwest | EU: germanynorth | SIN: eastasia | ANZ: australiasoutheast 
    resourceGroup: 
    nodeType: Standard_DS3_v2 
  aws:
    accountID: 
    IAMuser: 
    region: # US: us-west-1 | UK: eu-west-2 | EU: eu-central-1 | SIN: ap-southeast1 | ANZ: ap-southeast-2
    instanceType: t3.xlarge
  gcp:
    region: # US: us-central1 | UK: europe-west2 | EU: europe-west3 | SIN: asia-southeast1 | ANZ: australia-southeast1
    projectID: 
    machineType: e2-standard-4

private_registry:
  host: 
  username: 
  password: 
  repo: 
  ecr: false  # set true if you prefer AWS ECR for your registry (no user/password needed on EKS, need ECR admission controller for other distros)
              # assumes your AWS AccountID and Region above is the same for this ECR.

tanzu_network:
  username: 
  password: 

tap:
  
  tapVersion: 1.5.0
  carvelBundle: "sha256:79abddbc3b49b44fc368fede0dab93c266ff7c1fe305e2d555ed52d00361b446"
  imageScanPortal: #accepted values: carbonblack-private-image-scan-template snyk-private-image-scan-template, private-image-scan-template
  imageScanSensors:  #accepted values: carbonblack-private-image-scan-template snyk-private-image-scan-template, private-image-scan-template
  imageScanDoctor:  #accepted values: carbonblack-private-image-scan-template snyk-private-image-scan-template, private-image-scan-template
  imageScanPredictor:  #accepted values: carbonblack-private-image-scan-template snyk-private-image-scan-template, private-image-scan-template
  ingressIssuer:  # verify if you need to update .config/secrets/cluster-issuer.yaml
  isvImg: #BYO image name, must be pushed to private_registry/isvs repo


snyk: 
  token: 

carbonblack:
  cbc_api_id: 
  cbc_api_key: 
  cbc_org_key: 
  cbc_saas_url: 

apps_namespaces:
  dev1:  #for mood-portal single dev workload
  dev2:  #for mood-sensors single dev workload
  team:  #for the DevXmood dev team (mood-portal, mood-sensors, mood-doctor and mood-predictor workloads)
  stageProd:  #for promoting the DevXmood business application to stage and prod

gitops: 
  
  server: #e.g https://github.com
  owner:
  token: #must have read/write permissions for repo

  # repo must be created prior to installing the demo and cloned to the same path as the demo repo
  # supplychains deliverables will be pushed to server/repo/config
  repo: 
  
  # subPath needs to be created and contain at least the following resources: 
  # 1. scan-policy.yaml
  # 2. tekton-pipeline-golang.yaml
  # 3. tekton-pipeline-java.yaml
  # 4. tekton-pipeline-nodejs.yaml
  # 5. snyk-install.yaml !!make sure the snyk_values["metadataStore"] = {"url" value is updated
  # 6. carbonblack-install.yaml !!make sure the snyk_values["metadataStore"] = {"url" value is updated
  #
  # see example at https://github.com/dektlong/dekt-gitops/tree/main/resources
  subPath: 
  
  

dns:
  domain: 
  sysSubDomain: 
  devSubDomain: 
  prod1SubDomain: 
  prod2SubDomain: 
  godaddyApiKey: 
  godaddyApiSecret: 
  isRoute53: false #set true if you prefer route53 to godaddy
  #  awsRoute53HostedZoneID:   the zone ID for the AWS route53 maintenance

tmc:
  apiToken: 
  clusterGroup: 
